# V-RISC Two-Pass Assembler

این پروژه شامل پیاده‌سازی یک **اسمبلر دو‌مرحله‌ای (Two-Pass Assembler)** برای معماری فرضی **V-RISC** است. این معماری از فرمت‌های استاندارد RISC-V پشتیبانی می‌کند (R, I, S, B, U, J) و شامل مجموعه‌ای از pseudo-instruction‌ها، دستورالعمل‌های استاندارد، و directiveهایی مانند `.org`, `.align`, `.word`, `.byte`, `.asciiz`, ... می‌باشد.

---

## ⚙️ روند کلی عملکرد اسمبلر

اسمبلر در دو مرحله اجرا می‌شود:

### ✅ مرحله اول (Pass 1): تحلیل اولیه و جدول نمادها

1. **خواندن فایل ورودی**:
   - کد اسمبلی سطر به سطر خوانده می‌شود.
   - کامنت‌ها حذف شده و خطوط تمیز می‌شوند.

2. **شناسایی دستورالعمل‌ها و directiveها**:
   - لیبل‌ها (مانند `loop:`) ذخیره می‌شوند و آدرس فعلی به جدول نمادها (symbol table) افزوده می‌شود.
   - دستورات مانند `add`, `lw`, `beq`, و ... تحلیل اولیه می‌شوند.
   - directiveهایی مانند `.org`, `.align`, `.byte`, `.word`, `.asciiz`, و غیره نیز شناسایی شده و آدرس حافظه را مطابق با آن‌ها به‌روز می‌کنیم.

3. **محاسبه آدرس‌ها**:
   - با استفاده از `.org`, `.align`، و اندازه هر دستور، موقعیت دقیق هر خط از کد مشخص می‌شود.
   - هیچ باینری‌ای در این مرحله تولید نمی‌شود، فقط اطلاعات مربوط به لیبل‌ها و مکان‌یابی حافظه ذخیره می‌شود.

---

### ✅ مرحله دوم (Pass 2): تولید کد ماشین

1. **تحلیل نهایی دستورات**:
   - در این مرحله از جدول نمادها استفاده می‌کنیم تا لیبل‌ها را به آدرس واقعی ترجمه کنیم.

2. **اسمبل کردن هر دستور**:
   - برای دستورهای R, I, S, B, U, J از فرمت و بیت‌بندی مخصوص به هر فرمت استفاده می‌شود.
   - در صورت وجود pseudo-instruction مانند `li`, `mv`, یا `nop`، آن‌ها ابتدا به دستور استاندارد ترجمه می‌شوند.

3. **پردازش directiveها**:
   - `.word`, `.byte`, `.asciiz`، و ... به داده‌های باینری واقعی ترجمه می‌شوند.
   - `.align` باعث اضافه شدن padding (صفرها) برای تراز صحیح حافظه می‌شود.

4. **تولید خروجی نهایی**:
   - خروجی به صورت فایل hex یا binary ذخیره می‌شود.
   - همچنین آدرس‌های هر داده/دستور در فایل خروجی آورده می‌شود، مانند:

     ```
     0000: 9302a002
     0004: e38f52fe
     0008: 48000000
     000c: 69000000
     ```

---

## 🧪 ویژگی‌ها و قابلیت‌ها

- پشتیبانی از فرمت‌های استاندارد دستورالعمل (R, I, S, B, U, J)
- ترجمه pseudo-instructionها به دستورالعمل واقعی
- پشتیبانی از directiveهای داده‌ای مانند `.byte`, `.word`, `.asciiz`, `.ascii`
- مدیریت حافظه با `.org`, `.align`
- پشتیبانی از لیبل‌ها و پرش به آن‌ها
- تولید فایل خروجی دقیق با نمایش آدرس حافظه

---

## 📂 ساختار پروژه

